[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "corner-league-bot"
version = "1.0.0"
description = "Corner League Bot - AI-powered sports media discovery and personalization platform"
authors = [
    {name = "Sports Media Team", email = "team@sportsmedia.com"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.11"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    # Core framework
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",

    # Database
    "asyncpg>=0.29.0",
    "sqlalchemy[asyncio]>=2.0.23",
    "alembic>=1.13.0",

    # HTTP and networking
    "aiohttp>=3.9.0",
    "httpx>=0.25.0",
    "aiolimiter>=1.1.0",

    # Content processing
    "beautifulsoup4>=4.12.0",
    "lxml>=4.9.0",
    "readability-lxml>=0.8.1",
    "trafilatura>=1.6.0",
    "langdetect>=1.0.9",
    "python-dateutil>=2.8.0",

    # Search and text processing
    "elasticsearch>=8.11.0",
    "rank-bm25>=0.2.2",
    "nltk>=3.8.0",
    "spacy>=3.7.0",

    # Caching and queuing
    "redis>=4.2",
    "celery>=5.3.0",

    # Security and auth
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "python-multipart>=0.0.6",
    "fastapi-clerk-auth>=0.0.7",
    "pyjwt[crypto]>=2.8.0",
    "cryptography>=41.0.0",
    "requests>=2.31.0",

    # Monitoring and observability
    "prometheus-client>=0.19.0",
    "structlog>=23.2.0",
    "sentry-sdk[fastapi]>=1.38.0",

    # Utilities
    "click>=8.1.0",
    "python-dotenv>=1.0.0",
    "pyyaml>=6.0.0",
    "jinja2>=3.1.0",
    "croniter>=2.0.0",

    # AI/ML
    "openai>=1.3.0",
    "tiktoken>=0.5.0",

    # Data processing
    "pandas>=2.1.0",
    "numpy>=1.25.0",

    # URL and content processing
    "urllib3>=2.1.0",
    "chardet>=5.2.0",
    "tldextract>=5.1.0",

    # Hashing and deduplication
    "datasketch>=1.6.0",
    "mmh3>=4.0.0",
]

[project.optional-dependencies]
dev = [
    # Code quality
    "ruff>=0.1.6",
    "black>=23.11.0",
    "isort>=5.12.0",
    "mypy>=1.7.0",
    "bandit>=1.7.5",

    # Testing
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "httpx>=0.25.0",
    "faker>=20.1.0",

    # Development tools
    "pre-commit>=3.6.0",
    "ipython>=8.17.0",
    "jupyter>=1.0.0",

    # Documentation
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
    "mkdocstrings[python]>=0.24.0",
]

test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "httpx>=0.25.0",
    "faker>=20.1.0",
    "playwright>=1.40.0",
]

prod = [
    "gunicorn>=21.2.0",
    "gevent>=23.9.0",
]

[project.urls]
Homepage = "https://github.com/sportsmedia/platform"
Documentation = "https://docs.sportsmedia.com"
Repository = "https://github.com/sportsmedia/platform.git"
Issues = "https://github.com/sportsmedia/platform/issues"

[project.scripts]
sports-api = "apps.api.main:cli"
sports-worker = "apps.workers.main:cli"
sports-migrate = "libs.common.database:migrate_cli"

[tool.setuptools.packages.find]
where = ["."]
include = ["apps*", "libs*"]

[tool.ruff]
target-version = "py311"
line-length = 100
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG001", # unused-function-args
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "TID", # flake8-tidy-imports
    "Q", # flake8-quotes
    "FLY", # flynt
    "PERF", # perflint
    "RUF", # ruff-specific rules
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "W191",  # indentation contains tabs
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["ARG", "FBT"]

[tool.black]
target-version = ['py311']
line-length = 100
skip-string-normalization = true

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 100
known_first_party = ["apps", "libs"]

[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_equality = true
extra_checks = true

[[tool.mypy.overrides]]
module = [
    "trafilatura.*",
    "readability.*",
    "datasketch.*",
    "mmh3.*",
    "langdetect.*",
    "spacy.*",
    "nltk.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "e2e: marks tests as end-to-end tests",
    "golden: marks tests as golden corpus tests",
]

[tool.coverage.run]
source = ["apps", "libs"]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests", "migrations"]
skips = ["B101", "B601"]
