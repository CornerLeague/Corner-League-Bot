/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/auth/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Current User Profile
         * @description Get current user's profile.
         */
        get: operations["get_current_user_profile_api_auth_me_get"];
        put?: never;
        post?: never;
        /**
         * Delete User Account
         * @description Delete current user's account and all associated data.
         */
        delete: operations["delete_user_account_api_auth_me_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/preferences": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get User Preferences
         * @description Get current user's preferences.
         */
        get: operations["get_user_preferences_api_auth_preferences_get"];
        /**
         * Update User Preferences
         * @description Update current user's preferences.
         */
        put: operations["update_user_preferences_api_auth_preferences_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get User Stats
         * @description Get current user's statistics.
         */
        get: operations["get_user_stats_api_auth_stats_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/activity": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get User Activity
         * @description Get user activity history.
         */
        get: operations["get_user_activity_api_auth_activity_get"];
        put?: never;
        /**
         * Track User Activity
         * @description Track user activity.
         */
        post: operations["track_user_activity_api_auth_activity_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Users
         * @description List all users (admin only).
         */
        get: operations["list_users_api_auth_users_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/users/{user_id}/roles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Assign User Role
         * @description Assign role to user (admin only).
         */
        post: operations["assign_user_role_api_auth_users__user_id__roles_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/users/{user_id}/roles/{role}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Remove User Role
         * @description Remove role from user (admin only).
         */
        delete: operations["remove_user_role_api_auth_users__user_id__roles__role__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/questionnaire/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Questionnaire Status
         * @description Get the current questionnaire completion status for the authenticated user.
         */
        get: operations["get_questionnaire_status_api_questionnaire_status_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/questionnaire/sports": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Available Sports
         * @description Get all available sports for the questionnaire.
         */
        get: operations["get_available_sports_api_questionnaire_sports_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/questionnaire/sports/{sport_id}/teams": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Teams By Sport
         * @description Get all teams for a specific sport.
         */
        get: operations["get_teams_by_sport_api_questionnaire_sports__sport_id__teams_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/questionnaire/sports/preferences": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Save Sport Preferences
         * @description Save user's sport preferences (multiple selection allowed).
         */
        post: operations["save_sport_preferences_api_questionnaire_sports_preferences_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/questionnaire/sports/ranking": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update Sport Ranking
         * @description Update the ranking order of user's selected sports.
         */
        put: operations["update_sport_ranking_api_questionnaire_sports_ranking_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/questionnaire/teams/preferences": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Save Team Preferences
         * @description Save user's team preferences for their selected sports.
         */
        post: operations["save_team_preferences_api_questionnaire_teams_preferences_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/questionnaire/preferences": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get User Preferences
         * @description Get user's current sports and team preferences.
         */
        get: operations["get_user_preferences_api_questionnaire_preferences_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Health Check
         * @description Health check endpoint
         */
        get: operations["health_check_api_health_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Search Content
         * @description Search sports content
         */
        post: operations["search_content_api_search_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/content/{content_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Content
         * @description Get specific content item
         */
        get: operations["get_content_api_content__content_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/trending": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Trending Terms
         * @description Get currently trending sports terms
         */
        get: operations["get_trending_terms_api_trending_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/summarize": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Summarize Content
         * @description Generate AI summary of content items
         */
        post: operations["summarize_content_api_summarize_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/suggestions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Search Suggestions
         * @description Get search suggestions
         */
        get: operations["get_search_suggestions_api_suggestions_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Platform Stats
         * @description Get platform statistics
         */
        get: operations["get_platform_stats_api_stats_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * ActivityTrackingRequest
         * @description Activity tracking request.
         */
        ActivityTrackingRequest: {
            /**
             * Action
             * @description Action performed (view, like, share, save, etc.)
             */
            action: string;
            /**
             * Resource Type
             * @description Type of resource (article, video, etc.)
             */
            resource_type: string;
            /**
             * Resource Id
             * @description ID of the resource
             */
            resource_id: string;
            /** Metadata */
            metadata?: {
                [key: string]: unknown;
            } | null;
        };
        /** ApiResponse[RoleUpdateResult] */
        ApiResponse_RoleUpdateResult_: {
            /**
             * Ok
             * @default true
             */
            ok: boolean;
            data?: components["schemas"]["RoleUpdateResult"] | null;
        };
        /**
         * ContentItem
         * @description Content item response model
         */
        ContentItem: {
            /** Id */
            id: string;
            /** Title */
            title: string;
            /** Byline */
            byline?: string | null;
            /** Summary */
            summary?: string | null;
            /** Canonical Url */
            canonical_url: string;
            /** Published At */
            published_at?: string | null;
            /** Quality Score */
            quality_score: number;
            /**
             * Sports Keywords
             * @default []
             */
            sports_keywords: string[];
            /** Content Type */
            content_type?: string | null;
            /** Image Url */
            image_url?: string | null;
            /** Source Name */
            source_name: string;
            /** Word Count */
            word_count?: number | null;
            /**
             * Language
             * @default en
             */
            language: string;
            /** Search Score */
            search_score?: number | null;
            /** Search Rank */
            search_rank?: number | null;
        };
        /** FavoriteSportsRequest */
        FavoriteSportsRequest: {
            /** Sport Ids */
            sport_ids: string[];
        };
        /** TeamPreferenceRequest */
        TeamPreferenceRequest: {
            team_id: string;
            interest_level: number;
        };

        /** FavoriteTeamsRequest */
        FavoriteTeamsRequest: components["schemas"]["TeamPreferenceRequest"][];
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /**
         * HealthResponse
         * @description Health check response model
         */
        HealthResponse: {
            /** Status */
            status: string;
            /**
             * Timestamp
             * Format: date-time
             */
            timestamp: string;
            /** Version */
            version: string;
            /** Services */
            services: {
                [key: string]: {
                    [key: string]: unknown;
                };
            };
        };
        /**
         * RoleUpdateResult
         * @description Result of role assignment/removal operation.
         */
        RoleUpdateResult: {
            /** User Id */
            user_id: string;
            /** Role */
            role: string;
            /**
             * Action
             * @enum {string}
             */
            action: "added" | "removed";
            /** Message */
            message: string;
            /** Timezone */
            timezone?: string | null;
            /** Theme */
            theme?: string | null;
        };
        /**
         * SearchRequest
         * @description Search request model
         */
        SearchRequest: {
            /**
             * Query
             * @description Search query text
             * @default
             */
            query: string;
            /**
             * Sports
             * @description Sports filter (e.g., ['basketball', 'nba'])
             * @default []
             */
            sports: string[];
            /**
             * Sources
             * @description Source domains filter
             * @default []
             */
            sources: string[];
            /**
             * Content Types
             * @description Content type filter
             * @default []
             */
            content_types: string[];
            /**
             * Quality Threshold
             * @description Minimum quality score
             */
            quality_threshold?: number | null;
            /**
             * Date Range
             * @description Date range filter
             * @default {}
             */
            date_range: {
                [key: string]: string;
            };
            /**
             * Sort By
             * @description Sort order: relevance, date, quality, popularity
             * @default relevance
             */
            sort_by: string;
            /**
             * Limit
             * @description Number of results
             * @default 20
             */
            limit: number;
            /**
             * Cursor
             * @description Pagination cursor
             */
            cursor?: string | null;
        };
        /**
         * SearchResponse
         * @description Search response model
         */
        SearchResponse: {
            /** Items */
            items: components["schemas"]["ContentItem"][];
            /** Total Count */
            total_count: number;
            /** Has More */
            has_more: boolean;
            /** Next Cursor */
            next_cursor?: string | null;
            /** Search Time Ms */
            search_time_ms: number;
            /** Engine */
            engine: string;
            /**
             * From Cache
             * @default false
             */
            from_cache: boolean;
        };
        /** SportRankingRequest */
        SportRankingRequest: {
            /** Sport Rankings */
            sport_rankings: string[];
        };
        /** SportResponse */
        SportResponse: {
            /** Id */
            id: string;
            /** Name */
            name: string;
            /** Slug */
            slug: string;
            /** Has Teams */
            has_teams: boolean;
            /** Description */
            description?: string | null;
            /** Icon Url */
            icon_url?: string | null;
        };
        /**
         * SportsListResponse
         * @description Response model for available sports list.
         */
        SportsListResponse: {
            /** Sports */
            sports: components["schemas"]["SportResponse"][];
            /** Total Count */
            total_count: number;
        };
        /**
         * SummaryRequest
         * @description AI summary request model
         */
        SummaryRequest: {
            /**
             * Content Ids
             * @description List of content IDs to summarize
             */
            content_ids: string[];
            /**
             * Summary Type
             * @description Summary type: brief, detailed, analysis
             * @default brief
             */
            summary_type: string;
            /**
             * Focus Areas
             * @description Areas to focus on in summary
             * @default []
             */
            focus_areas: string[];
            /**
             * Max Length
             * @description Maximum summary length in words
             * @default 200
             */
            max_length: number;
        };
        /**
         * SummaryResponse
         * @description AI summary response model
         */
        SummaryResponse: {
            /** Summary */
            summary: string;
            /** Confidence Score */
            confidence_score: number;
            /** Source Count */
            source_count: number;
            /** Generation Time Ms */
            generation_time_ms: number;
            /**
             * Citations
             * @default []
             */
            citations: {
                [key: string]: unknown;
            }[];
            /**
             * Focus Areas Covered
             * @default []
             */
            focus_areas_covered: string[];
        };
        /** TeamResponse */
        TeamResponse: {
            /** Id */
            id: string;
            /** Sport Id */
            sport_id: string;
            /** Name */
            name: string;
            /** Slug */
            slug: string;
            /** City */
            city?: string | null;
            /** Abbreviation */
            abbreviation?: string | null;
            /** Logo Url */
            logo_url?: string | null;
            /** League */
            league?: string | null;
        };
        /**
         * TeamsListResponse
         * @description Response model for teams by sport.
         */
        TeamsListResponse: {
            /** Teams */
            teams: components["schemas"]["TeamResponse"][];
            /** Sport Id */
            sport_id: string;
            /** Sport Name */
            sport_name: string;
            /** Total Count */
            total_count: number;
        };
        /**
         * TrendingTerm
         * @description Trending term model
         */
        TrendingTerm: {
            /** Term */
            term: string;
            /** Normalized Term */
            normalized_term: string;
            /** Term Type */
            term_type: string;
            /** Count 1H */
            count_1h: number;
            /** Count 6H */
            count_6h: number;
            /** Count 24H */
            count_24h: number;
            /** Burst Ratio */
            burst_ratio: number;
            /** Trend Score */
            trend_score: number;
            /** Is Trending */
            is_trending: boolean;
            /** Trend Start */
            trend_start?: string | null;
            /** Trend Peak */
            trend_peak?: string | null;
            /**
             * Last Seen
             * Format: date-time
             */
            last_seen: string;
            /**
             * Related Terms
             * @default []
             */
            related_terms: string[];
            /**
             * Sports Context
             * @default {}
             */
            sports_context: {
                [key: string]: unknown;
            };
        };
        /**
         * UserPreferences
         * @description User preferences model.
         */
        UserPreferences: {
            /** Favorite Teams */
            favorite_teams?: string[];
            /** Favorite Sports */
            favorite_sports?: string[];
            /** Content Types */
            content_types?: string[];
            /**
             * Notification Email
             * @default true
             */
            notification_email: boolean;
            /**
             * Notification Push
             * @default true
             */
            notification_push: boolean;
            /**
             * Notification Frequency
             * @default daily
             */
            notification_frequency: string;
            /**
             * Language
             * @default en
             */
            language: string;
            /**
             * Timezone
             * @default UTC
             */
            timezone: string;
            /**
             * Theme
             * @default light
             */
            theme: string;
        };
        /**
         * UserPreferencesRequest
         * @description User preferences update request.
         */
        UserPreferencesRequest: {
            /** Favorite Teams */
            favorite_teams?: string[] | null;
            /** Favorite Sports */
            favorite_sports?: string[] | null;
            /** Content Types */
            content_types?: string[] | null;
            /** Notification Email */
            notification_email?: boolean | null;
            /** Notification Push */
            notification_push?: boolean | null;
            /** Notification Frequency */
            notification_frequency?: string | null;
            /** Language */
            language?: string | null;
        };
        /**
         * UserPreferencesResponse
         * @description Response model for user's current preferences.
         */
        UserPreferencesResponse: {
            /** Sport Preferences */
            sport_preferences: components["schemas"]["UserSportPreferenceResponse"][];
            /** Team Preferences */
            team_preferences: components["schemas"]["UserTeamPreferenceResponse"][];
            questionnaire_status: components["schemas"]["libs__common__questionnaire_models__QuestionnaireStatusResponse"];
        };
        /**
         * UserProfileResponse
         * @description User profile response model.
         */
        UserProfileResponse: {
            /** User Id */
            user_id: string;
            /** Email */
            email?: string | null;
            /** First Name */
            first_name?: string | null;
            /** Last Name */
            last_name?: string | null;
            /** Username */
            username?: string | null;
            /** Profile Image Url */
            profile_image_url?: string | null;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
            /** Last Sign In At */
            last_sign_in_at?: string | null;
            /** Roles */
            roles?: string[];
            /**
             * Is Active
             * @default true
             */
            is_active: boolean;
            /**
             * Is Verified
             * @default false
             */
            is_verified: boolean;
        };
        /** UserSportPreferenceResponse */
        UserSportPreferenceResponse: {
            sport: components["schemas"]["SportResponse"];
            /** Preference Rank */
            preference_rank: number;
        };
        /**
         * UserStatsResponse
         * @description User statistics response.
         */
        UserStatsResponse: {
            /** Articles Read */
            articles_read: number;
            /** Articles Saved */
            articles_saved: number;
            /** Articles Shared */
            articles_shared: number;
            /** Total Reading Time */
            total_reading_time: number;
            /** Favorite Topics */
            favorite_topics: string[];
            /** Activity Streak */
            activity_streak: number;
        };
        /** UserTeamPreferenceResponse */
        UserTeamPreferenceResponse: {
            team: components["schemas"]["TeamResponse"];
            sport: components["schemas"]["SportResponse"];
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
        /**
         * QuestionnaireStatusResponse
         * @description Response model for questionnaire completion status.
         */
        apps__api__questionnaire_routes__QuestionnaireStatusResponse: {
            /** Is Completed */
            is_completed: boolean;
            /** Current Step */
            current_step?: string | null;
            /** Completed Steps */
            completed_steps?: string[];
            /** Next Step */
            next_step?: string | null;
        };
        /** QuestionnaireStatusResponse */
        libs__common__questionnaire_models__QuestionnaireStatusResponse: {
            /** Current Step */
            current_step: number;
            /** Total Steps */
            total_steps: number;
            /** Is Completed */
            is_completed: boolean;
            /**
             * Started At
             * Format: date-time
             */
            started_at: string;
            /** Completed At */
            completed_at?: string | null;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    get_current_user_profile_api_auth_me_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserProfileResponse"];
                };
            };
        };
    };
    delete_user_account_api_auth_me_delete: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: string;
                    };
                };
            };
        };
    };
    get_user_preferences_api_auth_preferences_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserPreferences"];
                };
            };
        };
    };
    update_user_preferences_api_auth_preferences_put: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserPreferencesRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserPreferences"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_user_stats_api_auth_stats_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserStatsResponse"];
                };
            };
        };
    };
    get_user_activity_api_auth_activity_get: {
        parameters: {
            query?: {
                limit?: number;
                action_filter?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    }[];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    track_user_activity_api_auth_activity_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ActivityTrackingRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: string;
                    };
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_users_api_auth_users_get: {
        parameters: {
            query?: {
                limit?: number;
                offset?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserProfileResponse"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    assign_user_role_api_auth_users__user_id__roles_post: {
        parameters: {
            query: {
                role: string;
            };
            header?: never;
            path: {
                user_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_RoleUpdateResult_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    remove_user_role_api_auth_users__user_id__roles__role__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: string;
                role: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_RoleUpdateResult_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_questionnaire_status_api_questionnaire_status_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["apps__api__questionnaire_routes__QuestionnaireStatusResponse"];
                };
            };
        };
    };
    get_available_sports_api_questionnaire_sports_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SportsListResponse"];
                };
            };
        };
    };
    get_teams_by_sport_api_questionnaire_sports__sport_id__teams_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                sport_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TeamsListResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    save_sport_preferences_api_questionnaire_sports_preferences_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FavoriteSportsRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_sport_ranking_api_questionnaire_sports_ranking_put: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SportRankingRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    save_team_preferences_api_questionnaire_teams_preferences_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FavoriteTeamsRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_user_preferences_api_questionnaire_preferences_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserPreferencesResponse"];
                };
            };
        };
    };
    health_check_api_health_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HealthResponse"];
                };
            };
        };
    };
    search_content_api_search_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SearchRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SearchResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_content_api_content__content_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                content_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ContentItem"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_trending_terms_api_trending_get: {
        parameters: {
            query?: {
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TrendingTerm"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    summarize_content_api_summarize_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SummaryRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SummaryResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_search_suggestions_api_suggestions_get: {
        parameters: {
            query: {
                q: string;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string[];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_platform_stats_api_stats_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
        };
    };
}
